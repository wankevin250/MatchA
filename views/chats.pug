extends layouts/standard.pug

block head
  link(rel='stylesheet', href='/css/chats.css')
  script(src='/socket.io/socket.io.js')
  script.
    var myID = -1;
    var roomuuid = null;
    var room = null;
    var currentchatusers = [];
    const socket = io();
    var chatlist = [];
    
    // simpler functions
    function openNewChatForm() {
        document.getElementById("chatForm").style.display = "block";
    }
    function closeChatForm() {
        document.getElementById("chatForm").style.display = "none";
    } 
    
    function openFriendList() {
        document.getElementById("friendPopup").style.display = "block";
    }
    function closeFriendList() {
        document.getElementById("friendPopup").style.display = "none";
        $('#friendList').empty();
    }
    
    // clickables
    $(document).ready( function() {
    
      $(".leftHalf").addClass("fullWidth");
      
      $(".chatBtnClass").on("click", function() {
        let roomid = this.id;
        $.post('/openroom', { room : roomid }, function(data) {
          if (data.success) {
          
            room = roomid;
            roomuuid = roomid;
            
            socket.emit('join room', {
                user: myID,
                room: roomid,
            });
            
            // load all prev. messages to #messages using loop
                        
            $(".leftHalf").css('display', 'none');
            $(".rightHalf").css('display', 'block');
          }
        });
      });	
      
      $(".btnAceLeave").on("click", function() {
        $.post('/leaveroom', function(data) {
          if (data.success) {
            
            socket.emit('leave room', {
                user: myID,
                room: roomuuid,
            });
            
            roomuuid = null;
            room = null;
            currentchatusers = [];
            
            const myNode = document.getElementById("messages");
            myNode.textContent = '';
            
            $(".leftHalf").css('display', 'block');
            $(".rightHalf").css('display', 'none');
            document.getElementById("chatTitle").innerText = '';
          }
        });
      });
      
      $('#submitData').on('click', function(e) {
          var inputdata = document.getElementById("chatnameinput").value
          
          if (inputdata.trim().length == 0) {
              alert("You MUST input a name!");
          } else {
              $.post('/createroom', { chatnameinput : inputdata } , function (data) {
                  document.getElementById("chatnameinput").value = "";
                  document.getElementById("chatForm").style.display = "none";
                  
                  
                  if (data != null) {
                    var chatroomtitle = data.chatname;
                    
                    var chatbutton_temp = document.createElement("a");
                    chatbutton_temp.setAttribute("class", "chatBtnClass");
                    chatbutton_temp.setAttribute('id', data.roomid);
                    chatbutton_temp.appendChild(document.createTextNode(data.chatname));
                    
                    $('#listbox').append(chatbutton_temp);
                    
                    $("#" + data.roomid).on("click", function() {
                        let roomid = data.roomid;
                        
                        $.post('/openroom', { room : roomid }, function(d) {
                            if (d.success) {
                                room = roomid;
                                roomuuid = roomid;
                                currentchatusers = d.userlist;
                                
                                socket.emit('join room', {
                                    user: myID,
                                    room: roomid,
                                });
                                
                               // load all prev. messages to #messages using loop
                               
                                $(".leftHalf").css('display', 'none');
                                $(".rightHalf").css('display', 'block');
                                document.getElementById("chatTitle").innerText = chatroomtitle;
                            } else {
                                alert("Something went wrong!");
                            }
                        });
                    });
                  }
              }).error(function() {
                    // if call fails
                    alert('Something went wrong. Try again!');
              });
          }
          
      });
      
      $('#addFriends').on('click', function(event) {
          openFriendList();
          
          $.post('/friendstoadd', {roomid : roomuuid}, function (data) {
              
              for (let i = 0; i < data.length; i++) {
                  var friendbutton = document.createElement("a");
                  friendbutton.setAttribute("class", "friendListing");
                  friendbutton.setAttribute('id', data[i].userid);
                  friendbutton.appendChild(document.createTextNode("(" + data[i].displayname + ") " + data[i].fullname));
                  
                  $('#friendList').append(friendbutton);
                  
                  $("#" + data[i].userid).on("click", function() {
                    let friendid = data[i].userid;
                    
                    $.post('/addfriend', { friendusername: friendid, roomid: roomuuid }, function(data) {
                        if (data != null) {
                            alert("Chat invite sent to user " + friendid);
                        }
                    });
                    
                });
              }
          });
      });
      
    });
    
    
    
    function sendMessage(){
        if ($('#message').val().trim() !== '') {
          // scrub text?
          
          socket.emit('chat message', {
              text: $('#message').val().trim(),
              sender: myID,
              room: room,
          });
          
            
          $('#message').val('');
          $('#message').focus();
      }
    }
    
    $(document).ready(function() {
      socket.on('chat message', function (msg) {
          var message_temp = document.createElement("li");
          var message_outline = document.createElement("p"); 
          
          
          // somehow add the name of the person who sent the message
          // add timestamp
          var senderviz = document.createElement("p");
          var timestampviz = document.createElement("p");
          
          senderviz.setAttribute("class", "messageTags");
          timestampviz.setAttribute("class", "messageTags");
          
          message_temp.innerText = msg.text;
          senderviz.innerText = msg.sender;
          timestampviz.innerText = msg.timestamp;
          
          // message_temp.appendChild(document.createTextNode(msg.text));
          
          message_outline.append(senderviz);
          message_outline.append(message_temp);
          message_outline.append(timestampviz);
          
          if (myID === msg.sender) {
            message_outline.setAttribute("class", "me");
            senderviz.style.color = 'white';
            timestampviz.style.color = 'white';
          } else {
            message_outline.setAttribute("class", "other");
            senderviz.style.color = '#D4CB8C';
            timestampviz.style.color = '#D4CB8C';
          }
          
          $('#messages').append(message_outline);
          
      });
    });
    
    $(document).ready(function() {
      loadChatsClient();
    });
    
    async function loadChatsClient() {
    	$.ajax({
    	  type: 'POST',
    	  url: '/chatlist',
    	  success: function(response) {
          chatlist = response.clist;
          myID = response.username;
    	    
    	    for (let i = 0; i < chatlist.length; i++) {
    	        var chatroomtitle = chatlist[i].chatname;
    	        
                var chatbutton_temp = document.createElement("a");
                chatbutton_temp.setAttribute("class", "chatBtnClass");
                chatbutton_temp.setAttribute('id', chatlist[i].roomid);
                chatbutton_temp.appendChild(document.createTextNode(chatlist[i].chatname));
              
                $('#listbox').append(chatbutton_temp);
                
                $("#" + chatlist[i].roomid).on("click", function() {
                    let roomid = chatlist[i].roomid;
                    
                    $.post('/openroom', { room : roomid }, function(data) {
                        if (data.success) {
                            room = roomid;
                            roomuuid = roomid;
                            currentchatusers = data.userlist;
                            
                            socket.emit('join room', {
                                user: myID,
                                room: roomid,
                            });
                            
                            // load all prev. messages to #messages using loop
                        
                            $(".leftHalf").css('display', 'none');
                            $(".rightHalf").css('display', 'block');
                            document.getElementById("chatTitle").innerText = chatroomtitle;
                        }
                    });
                    
                });
                
            }
    	  }
    	});
    }
    
  title Chats 

block content
    
  h1(class="text-center italics bold") MatchA
  
  // proto button to enter first chatroom. TODO: make buttons for every chat in user's joined list  
  // TODO: js code for AJAX roomBtn.onclick -> call /openroom (opens this room)
  // when creating list, define a class of buttons in js to conduct ajax function on
  // with AJAX, send data in type "room" that is an JSON object { roomname: "", roomid: "" }
  // 
  div(class="leftHalf" id="listbox")
    a#createBtn.createBtnClass(onclick = "openNewChatForm()") Create New Chat
    #chatForm.form-popup
        div
          label(style='font-family: Helvetica, Sans-Serif; margin:10px')
            b New Chatroom Name
          input(type='text', placeholder='Chat Name', id='chatnameinput', required='true', style='font-family: Helvetica, Sans-Serif; margin:10px; display:inline-block')
          #submitData.button.btnAceBasic(style='display:inline-block') Create Chat
          button.btnAceBasic.cancel(type='button', onclick='closeChatForm()') Close
  
  // need to show chatbox iff req.session.currentroom != null
  div(class="rightHalf" id="chatbox")
    p#chatTitle.customHeader
    a.btnAceLeave(id="leaveChatBtn") Leave
    button#addFriends.btnAceBasic Invite Friends
    #friendPopup.friendspopup
        p(style='font-size: 16px; font-family: Helvetica, Sans-Serif;') Choose a friend's name to invite them to the chat
        ul#friendList.listTemplate
        button.btnAceBasic(type='button', onclick='closeFriendList()') Close
    div()
      ul#messages.messageDisplay
    form#message-form
    div(id="form-message")
      input(id = 'message', class = 'form-control', autocomplete='off', placeholder='Type a message...')
      button#send-message.btnAceSend(type='button', onclick='return sendMessage();')  Send
  
  