extends layouts/standard.pug

block head
  link(rel='stylesheet', href='/css/chats.css')
  script(src='/socket.io/socket.io.js')
  script(src="jquery.js")
  script.
    var myID = -1;
    var roomuuid = null;
    var room = null;
    var currentchatusers = [];
    const socket = io();
    var chatlist = [];
    
    // simpler functions
    function openNewChatForm() {
        document.getElementById("chatForm").style.display = "block";
    }
    function closeForm() {
        document.getElementById("chatForm").style.display = "none";
    } 
    
    // clickables
    $(document).ready( function() {
    
      $(".leftHalf").addClass("fullWidth");
      
      $(".chatBtnClass").on("click", function() {
        let roomid = this.id;
        $.post('/openroom', { room : roomid }, function(data) {
          if (data.success) {
          
            room = roomid;
            roomuuid = roomid;
            
            socket.emit('join room', {
                user: myID,
                room: roomid,
            });
            
            // load all prev. messages to #messages using loop
                        
            $(".leftHalf").css('display', 'none');
            $(".rightHalf").css('display', 'block');
          }
        });
      });	
      
      $(".btnAceLeave").on("click", function() {
        $.post('/leaveroom', function(data) {
          if (data.success) {
            
            socket.emit('leave room', {
                user: myID,
                room: roomuuid,
            });
            
            roomuuid = null;
            room = null;
            currentchatusers = [];
            
            const myNode = document.getElementById("messages");
            myNode.textContent = '';
            
            $(".leftHalf").css('display', 'block');
            $(".rightHalf").css('display', 'none');
          }
        });
      });
      
      chatDataForm
      
      $('#chatDataForm').on('submit', function(e) {
            $.post('/createroom', $('#chatDataForm').serialize(), function (data) {
                
            }).error(function() {
                // if call fails
                alert('Something went wrong. Try again!');
            });
            e.preventDefault();
      });
    });
    
    
    
    function sendMessage(){
        if ($('#message').val().trim() !== '') {
          // scrub text?
          
          socket.emit('chat message', {
              text: $('#message').val().trim(),
              sender: myID,
              room: room,
          });
        
          $.post('/sendmessage', { 
              text: $('#message').val().trim(),
              sender: myID,
              room: room,},
              
              function (data){
                // something with returned data?
          });
            
          $('#message').val('');
          $('#message').focus();
      }
    }
    
    $(document).ready(function() {
      socket.on('chat message', function (msg) {
          var message_temp = document.createElement("li");
          
          if (myID === msg.sender) {
            message_temp.setAttribute("class", "me");
          } else {
            message_temp.setAttribute("class", "other");
          }
          
          // somehow add the name of the person who sent the message
          
          message_temp.appendChild(document.createTextNode(msg.text));

          $('#messages').append(message_temp);
          
      });
    });
    
    $(document).ready(function() {
      loadChatsClient();
    });
    
    async function loadChatsClient() {
    	$.ajax({
    	  type: 'POST',
    	  url: '/chatlist',
    	  success: function(response) {
          chatlist = response.clist;
          myID = response.username;
    	    
    	    for (let i = 0; i < chatlist.length; i++) {
                var chatbutton_temp = document.createElement("a");
                chatbutton_temp.setAttribute("class", "chatBtnClass");
                chatbutton_temp.setAttribute('id', chatlist[i].roomid);
                chatbutton_temp.appendChild(document.createTextNode(chatlist[i].chatname));
              
                $('#listbox').append(chatbutton_temp);
                
                $("#" + chatlist[i].roomid).on("click", function() {
                    let roomid = chatlist[i].roomid;
                    
                    $.post('/openroom', { room : roomid }, function(data) {
                        if (data.success) {
                            room = roomid;
                            roomuuid = roomid;
                            currentchatusers = data.userlist;
                            
                            socket.emit('join room', {
                                user: myID,
                                room: roomid,
                            });
                            
                            // load all prev. messages to #messages using loop
                        
                            $(".leftHalf").css('display', 'none');
                            $(".rightHalf").css('display', 'block');
                        }
                    });
                    
                });
                
            }
    	  }
    	});
    }
    
    async function createChat(chatname) {
    	$.post('/createroom', { chatname : roomuuid }, function(data) {
    	    
    	});
    }
    
  title Chats 

block content
    
  h1(class="text-center italics bold") MatchA
  
  // proto button to enter first chatroom. TODO: make buttons for every chat in user's joined list  
  // TODO: js code for AJAX roomBtn.onclick -> call /openroom (opens this room)
  // when creating list, define a class of buttons in js to conduct ajax function on
  // with AJAX, send data in type "room" that is an JSON object { roomname: "", roomid: "" }
  // 
  div(class="leftHalf" id="listbox")
    a#createBtn.createBtnClass(onclick = "openNewChatForm()") Create New Chat
    #chatForm.form-popup
        #chatDataForm.form(action='', method='')
          label(style='font-family: Helvetica, Sans-Serif; margin:10px')
            b New Chatroom Name
          input(type='text', placeholder='Chat Name', name='chatnameinput', required='true', style='font-family: Helvetica, Sans-Serif; margin:10px')
          button.btnAceBasic(type='submit' style='font-family: Helvetica, Sans-Serif; margin:10px') Create Chat
          button.btnAceBasic.cancel(type='button', onclick='closeForm()') Close
  
  // need to show chatbox iff req.session.currentroom != null
  div(class="rightHalf" id="chatbox")
    a.btnAceLeave(id="leaveChatBtn") Leave
    div()
      ul#messages.messageDisplay
    form#message-form
    div(id="form-message")
      input(id = 'message', class = 'form-control', autocomplete='off', placeholder='Type a message...')
      button#send-message.btnAceSend(type='button', onclick='return sendMessage();')  Send
  
  