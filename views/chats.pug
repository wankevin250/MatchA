extends layouts/standard.pug

block head
  link(rel='stylesheet', href='/css/chats.css')
  script(src='/socket.io/socket.io.js')
  script.
    var socket = io();
    var myID = -1;
    var room = null;
    
    socket.on('welcome', function(data) {
      myID = data.id;
      socket.emit('client', {message: 'hello!', id: data.id});
    });
    socket.on('message', function(data) {
      console.log(data.message);
    });
    setInterval(function() {
      socket.emit('message', {message: 'I am still here', id: myID})
    });
    
    // when running /openroom, load all prev messages to #messages using loop
    
    $(document).ready( function() {
      $(".leftHalf").addClass("fullWidth");
      
      $(".chatBtnClass").on("click", function() {
        let roomid = this.id;
        $.post('/openroom', { room : roomid }, function(data) {
          if (data.success) {
            room = roomid;
            
            $(".leftHalf").css('display', 'none');
            $(".rightHalf").css('display', 'block');
          }
        });
      });
      
      $(".btnAceLeave").on("click", function() {
        $.post('/leaveroom', function(data) {
          if (data.success) {
            room = null;
            
            $(".leftHalf").css('display', 'block');
            $(".rightHalf").css('display', 'none');
          }
        });
      });
      
    });
    
    function sendMessage(){
      if ($('#message').val().trim() !== '') {
        socket.emit('chat message', {
          test: $('#message').val().trim(),
          sender: id,
          roomid: room
        });
        
        $('#message').val('');
        $('#message').focus();
      }
    }
    
    $(document).ready(function() {
      socket.on('chat message', function (msg) {
        socket.on('chat message', function (msg) {
          var message_temp = document.createElement("li");

          if (id === msg.sender) {
            message_temp.setAttribute("class", "me");
          } else {
            message_temp.setAttribute("class", msg.sender);
          }

          message_temp.appendChild(document.createTextNode(msg.text));

          $('#messages').append(message_temp);
          $('#messages').animate({
            scrollTop: $('#messages').get(0).scrollHeight
          }, 0);
        });
      });
    });
  
  title Chats 

block content
  h1(class="text-center italics bold") MatchA
  
  // proto button to enter first chatroom. TODO: make buttons for every chat in user's joined list  
  // TODO: js code for AJAX roomBtn.onclick -> call /openroom (opens this room)
  // when creating list, define a class of buttons in js to conduct ajax function on
  // with AJAX, send data in type "room" that is an JSON object { roomname: "", roomid: "" }
  // 
  div(class="leftHalf" id="prototype-button-wrapper")
    a#roomBtn.chatBtnClass Enter Chatroom
  
  // need to show chatbox iff req.session.currentroom != null
  div(class="rightHalf" id="chatbox")
    a.btnAceLeave(href="#", id="leaveChatBtn") Leave
    div()
      ul#messages
    form#message-form
    div(id="form-message")
      input(id = 'message', class = 'form-control', autocomplete='off', placeholder='Type a message...')
      button#send-message.btnAceSend(type='button', onclick='return sendMessage();')  Send
  
  
  